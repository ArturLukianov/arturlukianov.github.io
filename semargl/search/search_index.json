{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Semargl C2 is a versatile and powerful command-and-control (C2) framework tailored for red team operations. Developed in Golang and utilizing gRPC for efficient network communication, Semargl C2 offers a robust solution for managing complex attack simulations and security assessments. Features Multi-Language Agents : Includes agents written in Rust, C, and PowerShell, enabling seamless integration and execution across diverse environments. Flexible Communication : Supports a wide range of protocols, ensuring reliable and covert communication with the C2 server. Docker Support : Easily deployable using Docker, facilitating quick setup and scalability. Ansible Integration : Comes with Ansible roles for streamlined deployment of server, client, and redirector components. MITRE ATT&CK Integration : Generates reports aligned with MITRE ATT&CK techniques, enhancing the understanding of attack vectors and defensive tactics.","title":"Home"},{"location":"#features","text":"Multi-Language Agents : Includes agents written in Rust, C, and PowerShell, enabling seamless integration and execution across diverse environments. Flexible Communication : Supports a wide range of protocols, ensuring reliable and covert communication with the C2 server. Docker Support : Easily deployable using Docker, facilitating quick setup and scalability. Ansible Integration : Comes with Ansible roles for streamlined deployment of server, client, and redirector components. MITRE ATT&CK Integration : Generates reports aligned with MITRE ATT&CK techniques, enhancing the understanding of attack vectors and defensive tactics.","title":"Features"},{"location":"getting-started/","text":"First, you need to install a server and a client. You can find instructions in \"Installation\" section. Connecting to server To connect to server, simply run: semargl ________ / \\ / O O / / __ __ / /_/ /_/ /_/","title":"Getting started"},{"location":"getting-started/#connecting-to-server","text":"To connect to server, simply run: semargl ________ / \\ / O O / / __ __ / /_/ /_/ /_/","title":"Connecting to server"},{"location":"installation/ansible/","text":"semargl provides Ansible roles for easy installation across servers. Installing a server with Ansible","title":"Ansible"},{"location":"installation/ansible/#installing-a-server-with-ansible","text":"","title":"Installing a server with Ansible"},{"location":"installation/binary/","text":"Fastest way to install a semargl server is by downloading a latest release from the GitHub. You can also do it with the following one-liner: curl https://arturlukianov.github.io/install-semargl-server.sh | sh Note: we do not recommend to use one-liners at all. Inspect what you run on your machine","title":"Binary"},{"location":"installation/client/","text":"Fastest way to install a semargl client is by downloading a latest release from the GitHub. You can also do it with the following one-liner: curl https://arturlukianov.github.io/install-semargl-client.sh | sh Note: we do not recommend to use one-liners at all. Inspect what you run on your machine","title":"Client"},{"location":"installation/docker/","text":"semargl can be installed using Docker. However, some limitation should be considered. As we use network: host mode, not all protocols would be available. It is recommended to stick to TCP and HTTP(s) protocols. Building an image Image of semargl can be build using following commands: docker build -t latest . Running a docker-compose We provide a ready-to-use docker-compose file. You can simply run: docker compose up -d","title":"Docker"},{"location":"installation/docker/#building-an-image","text":"Image of semargl can be build using following commands: docker build -t latest .","title":"Building an image"},{"location":"installation/docker/#running-a-docker-compose","text":"We provide a ready-to-use docker-compose file. You can simply run: docker compose up -d","title":"Running a docker-compose"},{"location":"usage/agents/","text":"semargl uses agent-server infrastructure, common to other C2s. Here we will look at some basic operations with agents. Creating an agent Agents can be built using build command: # > build output.exe Listing available agents Using an agent","title":"Agents"},{"location":"usage/agents/#creating-an-agent","text":"Agents can be built using build command: # > build output.exe","title":"Creating an agent"},{"location":"usage/agents/#listing-available-agents","text":"","title":"Listing available agents"},{"location":"usage/agents/#using-an-agent","text":"","title":"Using an agent"},{"location":"usage/listeners/","text":"Creating a listener New listener is started using listen command: # > listen tcp localhost 8080 Listing listeners You can view list of listeners using qlisteners command: # > ql","title":"Listeners"},{"location":"usage/listeners/#creating-a-listener","text":"New listener is started using listen command: # > listen tcp localhost 8080","title":"Creating a listener"},{"location":"usage/listeners/#listing-listeners","text":"You can view list of listeners using qlisteners command: # > ql","title":"Listing listeners"}]}